@page
@model IndexModel
@{
    ViewData["Title"] = "Formulár";
}


<!DOCTYPE html>
<html lang="sk">
<head>
    <title>Formulár pre účastníkov</title>
</head>
<body>
    <form method="post">
        <fieldset>
            <legend>Účastníci</legend>
            <ul id="ucastnici">
                <!-- Existing participants will be displayed here -->
            </ul>
            <button type="button" id="pridat-ucastnika">Pridať účastníka</button>
            <button type="submit" id="odoslat-posledny-ucastnik">Ulož XML</button>
            <button type="submit" name="generateHtml">Transformuj XML do HTML</button>
        </fieldset>
    </form>

    <script>
        // počiatočná hodnota počtu účastníkov
        let pocet_ucastnikov = 1;

        // funkcia na pridanie nového účastníka
        function pridatUcastnika() {

            // kontrola, či je počet účastníkov menší ako 10
            if (pocet_ucastnikov > 10) {
                // zablokovanie tlačidla "Pridať účastníka"
                alert("Maximálny počet účastníkov je 10.");
                return;
            }

            // vytvorenie nového prvku <li>
            let novyUcastnik = document.createElement("li");

            // pridanie potrebných polí
            novyUcastnik.innerHTML = `
                <h2>Účastník ${pocet_ucastnikov}</h2>
                <label for="Participants[${pocet_ucastnikov}].Name">Meno:</label>
                <input type="text" name="Participants[${pocet_ucastnikov}].Name" id="ucastnik_${pocet_ucastnikov}_meno" required pattern="^[a-zA-ZÀ-ž]+$">
                <label for="Participants[${pocet_ucastnikov}].Surname">Priezvisko:</label>
                <input type="text" name="Participants[${pocet_ucastnikov}].Surname" id="ucastnik_${pocet_ucastnikov}_priezvisko" required pattern="^[a-zA-ZÀ-ž]+$">
                <label for="Participants[${pocet_ucastnikov}].Date">Dátum narodenia:</label>
                <input type="date" name="Participants[${pocet_ucastnikov}].Date" id="ucastnik_${pocet_ucastnikov}_datum_narodenia" required  onchange="calculateAge(this)">
                <label for="Participants[${pocet_ucastnikov}].Age">Vek:</label>
                <input type="number" name="Participants[${pocet_ucastnikov}].Age" id="ucastnik_${pocet_ucastnikov}_vek" required min="0" max="120">
                <label for="Participants[${pocet_ucastnikov}].Email">E-mail:</label>
                <input type="email" name="Participants[${pocet_ucastnikov}].Email" id="ucastnik_${pocet_ucastnikov}_email" placeholder="me@example.com" required>
            `;

            // pridanie nového prvku na koniec zoznamu
            document.getElementById("ucastnici").appendChild(novyUcastnik);

            // zvýšenie počtu účastníkov
            pocet_ucastnikov++;
        }

        document.getElementById("pridat-ucastnika").addEventListener("click", pridatUcastnika);
    </script>

    <h2 class="text-center display-6">Nahraj XML súbor a porovnaj s XSD</h2>
    <form method="post" asp-page-handler="UploadXml" enctype="multipart/form-data">
        <input id="file-upload" type="file" name="xmlFile" accept=".xml" required />
        <button type="submit">Over XML voči XSD</button>
    </form>

@if (TempData["result"] != null)
{
    <script>
        // Check if TempData["result"] is not null
        var resultMessage = "@TempData["result"]";

        // Create a temporary element to decode HTML entities
        var tempElement = document.createElement("div");
        tempElement.innerHTML = resultMessage;
        var decodedMessage = tempElement.textContent;

        if (decodedMessage.trim() !== "") {
            alert(decodedMessage);
        }
    </script>
}

@if (ViewData["PopupMessage"] != null)
{
    <script>
        // Check if ViewData["PopupMessage"] is not null
        var resultMessage = "@ViewData["PopupMessage"]";

        // Create a temporary element to decode HTML entities
        var tempElement = document.createElement("div");
        tempElement.innerHTML = resultMessage;
        var decodedMessage = tempElement.textContent;

        if (decodedMessage.trim() !== "") {
            alert(decodedMessage);
        }
    </script>
}

<script>
      function vytvoritHtml() {
                  // Fetch the XML file
                  fetch('ucastnici.xml')
                      .then(response => response.text())
                      .then(xmlData => {
                          // Fetch the XSLT file
                          fetch('ucastnici.xslt')
                              .then(response => response.text())
                              .then(xsltData => {
                                  // Transform XML to HTML using XSLT
                                  const xsltProcessor = new XSLTProcessor();
                                  const parser = new DOMParser();
                                  const xml = parser.parseFromString(xmlData, 'text/xml');
                                  const xsl = parser.parseFromString(xsltData, 'text/xml');
                                  const resultDocument = xsltProcessor.transformToDocument(xml, xsl);
                                  const htmlData = new XMLSerializer().serializeToString(resultDocument);
      
                                  // Create an HTML blob and object URL
                                  const blob = new Blob([htmlData], { type: 'text/html' });
                                  const objectUrl = URL.createObjectURL(blob);
      
                                  // Create a download link for the HTML file
                                  const a = document.createElement('a');
                                  a.href = objectUrl;
                                  a.download = 'ucastnici_html.html';
                                  a.textContent = 'Download HTML';
      
                                  // Append the link to the document
                                  document.body.appendChild(a);
                              })
                              .catch(error => {
                                  console.error('Error fetching XSLT file:', error);
                              });
                      })
                      .catch(error => {
                          console.error('Error fetching XML file:', error);
                      });
              }
      
              // Add an event listener to the "Transformuj do HTML" button
              document.getElementById("transformuj-do-html").addEventListener("click", vytvoritHtml);
          </script>
<script>
    function calculateAge(dateInput) {
        const today = new Date();
        const birthDate = new Date(dateInput.value);

        // Check if the entered date is in the future
        if (birthDate > today) {
            alert("Dátum narodenia nemôže byť v budúcnosti.");
            dateInput.value = ""; // Clear the input
            return;
        }

        let age = today.getFullYear() - birthDate.getFullYear();

        // If the birthday hasn't occurred yet this year, subtract one year
        if (today.getMonth() < birthDate.getMonth() || (today.getMonth() === birthDate.getMonth() && today.getDate() < birthDate.getDate())) {
            age--;
        }

        // Update the age input field with the calculated age
        const ageInputId = dateInput.id.replace("datum_narodenia", "vek");
        document.getElementById(ageInputId).value = age;
    }
</script>

</body>
</html>