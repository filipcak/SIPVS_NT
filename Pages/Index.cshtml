@page
@using System.Web
@model IndexModel
@{
    ViewData["Title"] = "Formulár";
}


<!DOCTYPE html>
<html lang="sk">

<head>
    <script type="text/javascript" src="https://www.slovensko.sk/static/zep/dbridge_js/v1.0/config.js"></script>
    <script type="text/javascript" src="https://www.slovensko.sk/static/zep/dbridge_js/v1.0/dCommon.min.js"></script>
    <script type="text/javascript" src="https://www.slovensko.sk/static/zep/dbridge_js/v1.0/dSigXades.min.js"></script>
    <title>Formulár pre účastníkov</title>
</head>

<body>
    <form method="post">
        <fieldset>
            <legend>Účastníci</legend>
            <ul id="ucastnici">
                <!-- Existing participants will be displayed here -->
            </ul>
            <button type="button" id="pridat-ucastnika">Pridať účastníka</button>
            <button type="submit" id="odoslat-posledny-ucastnik">Ulož XML</button>
            <button type="submit" name="generateHtml">Transformuj XML do HTML</button>
        

        </fieldset>
    </form>
    <fieldset>
        <form method="post" asp-page-handler="UploadXml">
            <button type="submit">Porovnaj XML voči XSD</button>
        </form>
        <button id="podpisovac">Podpíš</button>
    </fieldset>

    <script>
        // počiatočná hodnota počtu účastníkov
        let pocet_ucastnikov = 1;

        // funkcia na pridanie nového účastníka
        function pridatUcastnika() {

            // kontrola, či je počet účastníkov menší ako 10
            if (pocet_ucastnikov > 10) {
                // zablokovanie tlačidla "Pridať účastníka"
                alert("Maximálny počet účastníkov je 10.");
                return;
            }

            // vytvorenie nového prvku <li>
            let novyUcastnik = document.createElement("li");

            // pridanie potrebných polí
            novyUcastnik.innerHTML = `
                <h2>Účastník ${pocet_ucastnikov}</h2>
                <label for="Participants[${pocet_ucastnikov}].Name">Meno:</label>
                <input type="text" name="Participants[${pocet_ucastnikov}].Name" id="ucastnik_${pocet_ucastnikov}_meno" required pattern="^[a-zA-ZÀ-ž]+$">
                <label for="Participants[${pocet_ucastnikov}].Surname">Priezvisko:</label>
                <input type="text" name="Participants[${pocet_ucastnikov}].Surname" id="ucastnik_${pocet_ucastnikov}_priezvisko" required pattern="^[a-zA-ZÀ-ž]+$">
                <label for="Participants[${pocet_ucastnikov}].Date">Dátum narodenia:</label>
                <input type="date" name="Participants[${pocet_ucastnikov}].Date" id="ucastnik_${pocet_ucastnikov}_datum_narodenia" required  onchange="calculateAge(this)">
                <label for="Participants[${pocet_ucastnikov}].Age">Vek:</label>
                <input type="number" name="Participants[${pocet_ucastnikov}].Age" id="ucastnik_${pocet_ucastnikov}_vek" required min="0" max="120">
                <label for="Participants[${pocet_ucastnikov}].Email">E-mail:</label>
                <input type="email" name="Participants[${pocet_ucastnikov}].Email" id="ucastnik_${pocet_ucastnikov}_email" placeholder="me@example.com" required>
            `;

            // pridanie nového prvku na koniec zoznamu
            document.getElementById("ucastnici").appendChild(novyUcastnik);

            // zvýšenie počtu účastníkov
            pocet_ucastnikov++;
        }

        document.getElementById("pridat-ucastnika").addEventListener("click", pridatUcastnika);
    </script>





    @if (TempData["result"] != null)
    {
        <script>
            // Check if TempData["result"] is not null
            var resultMessage = "@TempData["result"]";

            // Create a temporary element to decode HTML entities
            var tempElement = document.createElement("div");
            tempElement.innerHTML = resultMessage;
            var decodedMessage = tempElement.textContent;

            if (decodedMessage.trim() !== "") {
                alert(decodedMessage);
            }
        </script>
    }

    @if (ViewData["PopupMessage"] != null)
    {
        <script>
            // Check if ViewData["PopupMessage"] is not null
            var resultMessage = "@ViewData["PopupMessage"]";

            // Create a temporary element to decode HTML entities
            var tempElement = document.createElement("div");
            tempElement.innerHTML = resultMessage;
            var decodedMessage = tempElement.textContent;

            if (decodedMessage.trim() !== "") {
                alert(decodedMessage);
            }
        </script>
    }

    <script>


        function vytvoritHtml() {
            // Fetch the XML file
            fetch('ucastnici.xml')
                .then(response => response.text())
                .then(xmlData => {
                    // Fetch the XSLT file
                    fetch('ucastnici.xslt')
                        .then(response => response.text())
                        .then(xsltData => {
                            // Transform XML to HTML using XSLT
                            const xsltProcessor = new XSLTProcessor();
                            const parser = new DOMParser();
                            const xml = parser.parseFromString(xmlData, 'text/xml');
                            const xsl = parser.parseFromString(xsltData, 'text/xml');
                            const resultDocument = xsltProcessor.transformToDocument(xml, xsl);
                            const htmlData = new XMLSerializer().serializeToString(resultDocument);

                            // Create an HTML blob and object URL
                            const blob = new Blob([htmlData], { type: 'text/html' });
                            const objectUrl = URL.createObjectURL(blob);

                            // Create a download link for the HTML file
                            const a = document.createElement('a');
                            a.href = objectUrl;
                            a.download = 'ucastnici_html.html';
                            a.textContent = 'Download HTML';

                            // Append the link to the document
                            document.body.appendChild(a);
                        })
                        .catch(error => {
                            console.error('Error fetching XSLT file:', error);
                        });
                })
                .catch(error => {
                    console.error('Error fetching XML file:', error);
                });
        }

        // Add an event listener to the "Transformuj do HTML" button
        document.getElementById("transformuj-do-html").addEventListener("click", vytvoritHtml);
    </script>
    <script>
        function calculateAge(dateInput) {
            const today = new Date();
            const birthDate = new Date(dateInput.value);

            // Check if the entered date is in the future
            if (birthDate > today) {
                alert("Dátum narodenia nemôže byť v budúcnosti.");
                dateInput.value = ""; // Clear the input
                return;
            }

            let age = today.getFullYear() - birthDate.getFullYear();

            // If the birthday hasn't occurred yet this year, subtract one year
            if (today.getMonth() < birthDate.getMonth() || (today.getMonth() === birthDate.getMonth() && today.getDate() < birthDate.getDate())) {
                age--;
            }

            // Update the age input field with the calculated age
            const ageInputId = dateInput.id.replace("datum_narodenia", "vek");
            document.getElementById(ageInputId).value = age;
        }
    </script>
    @{
        // Obtain the Base64 content using your C# method
        var base64Content = LoadPdf.LoadFileAsBase64("example.pdf");
        var encodedBase64Content = HttpUtility.UrlEncode(base64Content);
    }
    <script>
        // Define the Callback function
        function Callback(onSuccess) {
            this.onSuccess = onSuccess;
            this.onError = function (e) {
                alert("Chyba: " + e);
            };
        }

async function executeScript() {
  const xmlData = await loadXML();
  const xsdData = await loadXSD();
  const xslData = await loadXSL();
  ditec.dSigXadesJs.deploy(null, new Callback(function () {
    ditec.dSigXadesJs.initialize(new Callback(async function () {
      //  function(objectId, objectDescription, sourcePdfBase64, password, objectFormatIdentifier, reqLevel, convert, callback) {
      await ditec.dSigXadesJs.addTxtObject("objectId1", "objectDescription", "Hello world", "http://objectFormatIdentifier");
      await ditec.dSigXadesJs.addPdfObject("objectId_2", "test pdf", decodeURIComponent("@encodedBase64Content"), "", "http://example.com/objectFormatIdentifier", 2, false);
      await ditec.dSigXadesJs.addXmlObject2("objectId_3", "xml", xmlData, xsdData, "http://SIPVS_I_NT_ucastnici_skupina_6", "http://localhost:5057/?handler=xsdData", xslData, "http://localhost:5057/?handler=xslData", "HTML");
      await ditec.dSigXadesJs.sign20("signatureId", "http://www.w3.org/2001/04/xmlenc#sha256", "urn:oid:1.3.158.36061701.1.2.3", "dataEnvelopeId", "http://dataEnvelopeURI", "dataEnvelopeDescr");

      ditec.dSigXadesJs.getSignedXmlWithEnvelope(new Callback(function (ret) {
        // returned signed document
        // Format XML
        const xmlDoc = new DOMParser().parseFromString(ret, 'text/xml');
        const serializer = new XMLSerializer();
        const formattedXML = serializer.serializeToString(xmlDoc);

        // Save XML to a new file
        const blob = new Blob([formattedXML], { type: 'text/xml' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'signed.xml';
        a.click();
        URL.revokeObjectURL(url);
      }));
    }));
  }));
}


        // Attach a click event listener to the button
        document.getElementById("podpisovac").addEventListener("click", executeScript);


        async function loadXML() {
            try {
                const response = await fetch('?handler=XmlData');
                const xmlText = await response.text();
                return xmlText;


            } catch (error) {
                console.error('Error loading XML:', error);
            }
        }

        async function loadXSD() {
            try {
                const response = await fetch('?handler=XsdData');
                const xsdText = await response.text();
                console.log(xsdText)
                return xsdText;


            } catch (error) {
                console.error('Error loading XML:', error);
            }
        }

        async function loadXSL() {
            try {
                const response = await fetch('?handler=XslData');
                const xslText = await response.text();
                console.log(xslText)
                return xslText;


            } catch (error) {
                console.error('Error loading XML:', error);
            }
        }

    </script>

</body>

</html>